generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public"]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String
  auth_code_issued_at    DateTime?             @db.Timestamptz(6)
  saml_relay_states      saml_relay_states[]

  @@index([created_at(sort: Desc)])
  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model identities {
  provider_id     String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?   @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider_id, provider], map: "identities_provider_id_provider_unique")
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_challenges {
  id                     String      @id @db.Uuid
  factor_id              String      @db.Uuid
  created_at             DateTime    @db.Timestamptz(6)
  verified_at            DateTime?   @db.Timestamptz(6)
  ip_address             String      @db.Inet
  otp_code               String?
  web_authn_session_data Json?
  mfa_factors            mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@index([created_at(sort: Desc)], map: "mfa_challenge_created_at_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_factors {
  id                   String           @id @db.Uuid
  user_id              String           @db.Uuid
  friendly_name        String?
  factor_type          factor_type
  status               factor_status
  created_at           DateTime         @db.Timestamptz(6)
  updated_at           DateTime         @db.Timestamptz(6)
  secret               String?
  phone                String?
  last_challenged_at   DateTime?        @unique @db.Timestamptz(6)
  web_authn_credential Json?
  web_authn_aaguid     String?          @db.Uuid
  mfa_challenges       mfa_challenges[]
  users                users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, phone], map: "unique_phone_factor_per_user")
  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@index([user_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model one_time_tokens {
  id         String              @id @db.Uuid
  user_id    String              @db.Uuid
  token_type one_time_token_type
  token_hash String
  relates_to String
  created_at DateTime            @default(now()) @db.Timestamp(6)
  updated_at DateTime            @default(now()) @db.Timestamp(6)
  users      users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, token_type])
  @@index([relates_to], map: "one_time_tokens_relates_to_hash_idx", type: Hash)
  @@index([token_hash], map: "one_time_tokens_token_hash_hash_idx", type: Hash)
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([updated_at(sort: Desc)])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  name_id_format    String?
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  flow_state_id   String?       @db.Uuid
  flow_state      flow_state?   @relation(fields: [flow_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model auth_schema_migrations {
  version String @id @db.VarChar(255)

  @@map("schema_migrations")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  refreshed_at   DateTime?        @db.Timestamp(6)
  user_agent     String?
  ip             String?          @db.Inet
  tag            String?
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([not_after(sort: Desc)])
  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  disabled          Boolean?
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@index([resource_id], map: "sso_providers_resource_id_pattern_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model users {
  instance_id                 String?           @db.Uuid
  id                          String            @id @db.Uuid
  aud                         String?           @db.VarChar(255)
  role                        String?           @db.VarChar(255)
  email                       String?           @db.VarChar(255)
  encrypted_password          String?           @db.VarChar(255)
  email_confirmed_at          DateTime?         @db.Timestamptz(6)
  invited_at                  DateTime?         @db.Timestamptz(6)
  confirmation_token          String?           @db.VarChar(255)
  confirmation_sent_at        DateTime?         @db.Timestamptz(6)
  recovery_token              String?           @db.VarChar(255)
  recovery_sent_at            DateTime?         @db.Timestamptz(6)
  email_change_token_new      String?           @db.VarChar(255)
  email_change                String?           @db.VarChar(255)
  email_change_sent_at        DateTime?         @db.Timestamptz(6)
  last_sign_in_at             DateTime?         @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?         @db.Timestamptz(6)
  updated_at                  DateTime?         @db.Timestamptz(6)
  phone                       String?           @unique
  phone_confirmed_at          DateTime?         @db.Timestamptz(6)
  phone_change                String?           @default("")
  phone_change_token          String?           @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?         @db.Timestamptz(6)
  confirmed_at                DateTime?         @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?           @default("") @db.VarChar(255)
  email_change_confirm_status Int?              @default(0) @db.SmallInt
  banned_until                DateTime?         @db.Timestamptz(6)
  reauthentication_token      String?           @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?         @db.Timestamptz(6)
  is_sso_user                 Boolean           @default(false)
  deleted_at                  DateTime?         @db.Timestamptz(6)
  is_anonymous                Boolean           @default(false)
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  one_time_tokens             one_time_tokens[]
  sessions                    sessions[]
  auth_logs                   auth_logs[]
  profiles                    profiles?

  @@index([instance_id])
  @@index([is_anonymous])
  @@schema("auth")
}

model breaks {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  shift_id         String?   @db.Uuid
  start_time       DateTime  @db.Timestamptz(6)
  end_time         DateTime? @db.Timestamptz(6)
  duration_minutes Int?
  is_manual_edit   Boolean?  @default(false)
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  shifts           shifts?   @relation(fields: [shift_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model email_notifications {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String?   @db.Uuid
  type          String    @db.VarChar(50)
  channel       String    @default("email") @db.VarChar(20)
  recipient     String    @db.VarChar(255)
  subject       String?   @db.VarChar(500)
  content       String?
  status        String    @default("pending") @db.VarChar(20)
  error_message String?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  sent_at       DateTime? @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  profiles      profiles? @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at], map: "idx_email_notifications_created_at")
  @@index([recipient], map: "idx_email_notifications_recipient")
  @@index([status], map: "idx_email_notifications_status")
  @@index([type], map: "idx_email_notifications_type")
  @@index([user_id], map: "idx_email_notifications_user_id")
  @@schema("public")
}

model notifications {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?   @db.Uuid
  title      String
  message    String
  type       String
  read       Boolean?  @default(false)
  project_id String?   @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  projects   projects? @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profiles   profiles? @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model profiles {
  id                                                                          String                       @id @db.Uuid
  full_name                                                                   String
  email                                                                       String
  phone                                                                       String?
  profile_picture_url                                                         String?
  status                                                                      user_status?                 @default(pending)
  created_at                                                                  DateTime?                    @default(now()) @db.Timestamptz(6)
  updated_at                                                                  DateTime?                    @default(now()) @db.Timestamptz(6)
  role                                                                        system_role?
  nearest_major_city                                                          String?
  willing_to_fly                                                              Boolean                      @default(false)
  email_notifications                                                         email_notifications[]
  notifications                                                               notifications[]
  users                                                                       users                        @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  projects                                                                    projects[]
  shifts                                                                      shifts[]
  system_settings                                                             system_settings[]
  talent_groups                                                               talent_groups[]
  talent_project_assignments_talent_project_assignments_assigned_byToprofiles talent_project_assignments[] @relation("talent_project_assignments_assigned_byToprofiles")
  talent_project_assignments_talent_project_assignments_escort_idToprofiles   talent_project_assignments[] @relation("talent_project_assignments_escort_idToprofiles")
  talent_status                                                               talent_status[]
  team_assignments                                                            team_assignments[]
  timecards_timecards_approved_byToprofiles                                   timecards[]                  @relation("timecards_approved_byToprofiles")
  timecards_timecards_user_idToprofiles                                       timecards[]                  @relation("timecards_user_idToprofiles")
  user_favorites                                                              user_favorites[]
  talent_daily_assignments                                                    talent_daily_assignments[]
  group_daily_assignments                                                     group_daily_assignments[]
  project_readiness_locations_finalized_by                                   project_readiness[]          @relation("project_readiness_locations_finalized_by")
  project_readiness_roles_finalized_by                                       project_readiness[]          @relation("project_readiness_roles_finalized_by")
  project_readiness_team_finalized_by                                        project_readiness[]          @relation("project_readiness_team_finalized_by")
  project_readiness_talent_finalized_by                                      project_readiness[]          @relation("project_readiness_talent_finalized_by")
  project_settings_updated_by                                                project_settings[]
  project_audit_log                                                          project_audit_log[]

  @@index([nearest_major_city], map: "idx_profiles_nearest_major_city")
  @@index([willing_to_fly], map: "idx_profiles_willing_to_fly")
  @@index([role], map: "idx_profiles_role")
  @@schema("public")
}

model project_roles {
  id         String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  project_id String?      @db.Uuid
  base_pay   Decimal?     @db.Decimal(10, 2)
  created_at DateTime?    @default(now()) @db.Timestamptz(6)
  role       project_role
  projects   projects?    @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model project_role_templates {
  id            String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  project_id    String       @db.Uuid
  role          project_role
  display_name  String       @db.VarChar(100)
  base_pay_rate Decimal      @db.Decimal(10, 2)
  time_type     String       @default("hourly") @db.VarChar(20)
  description   String?
  is_active     Boolean      @default(true)
  sort_order    Int          @default(0)
  created_at    DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?    @default(now()) @db.Timestamptz(6)
  is_default    Boolean?     @default(false)
  projects      projects     @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([project_id, role, display_name], map: "project_role_templates_project_role_name_unique")
  @@index([project_id], map: "idx_project_role_templates_project_id")
  @@index([role], map: "idx_project_role_templates_role")
  @@index([project_id, is_active], map: "idx_project_role_templates_active")
  @@index([project_id, sort_order], map: "idx_project_role_templates_sort")
  @@schema("public")
}

model project_readiness {
  project_id                String    @id @db.Uuid
  
  // Locations
  has_default_locations     Boolean   @default(true)
  custom_location_count     Int       @default(0)
  locations_finalized       Boolean   @default(false)
  locations_finalized_at    DateTime? @db.Timestamptz(6)
  locations_finalized_by    String?   @db.Uuid
  locations_status          String    @default("default-only") @db.VarChar(20)
  
  // Roles
  has_default_roles         Boolean   @default(true)
  custom_role_count         Int       @default(0)
  roles_finalized           Boolean   @default(false)
  roles_finalized_at        DateTime? @db.Timestamptz(6)
  roles_finalized_by        String?   @db.Uuid
  roles_status              String    @default("default-only") @db.VarChar(20)
  
  // Team
  total_staff_assigned      Int       @default(0)
  supervisor_count          Int       @default(0)
  escort_count              Int       @default(0)
  coordinator_count         Int       @default(0)
  team_finalized            Boolean   @default(false)
  team_finalized_at         DateTime? @db.Timestamptz(6)
  team_finalized_by         String?   @db.Uuid
  team_status               String    @default("none") @db.VarChar(20)
  
  // Talent
  total_talent              Int       @default(0)
  talent_finalized          Boolean   @default(false)
  talent_finalized_at       DateTime? @db.Timestamptz(6)
  talent_finalized_by       String?   @db.Uuid
  talent_status             String    @default("none") @db.VarChar(20)
  
  // Assignment Progress
  assignments_status        String    @default("none") @db.VarChar(20)
  urgent_assignment_issues  Int       @default(0)
  
  // Overall
  overall_status            String    @default("getting-started") @db.VarChar(20)
  last_updated              DateTime  @default(now()) @db.Timestamptz(6)
  
  created_at                DateTime  @default(now()) @db.Timestamptz(6)
  updated_at                DateTime  @default(now()) @db.Timestamptz(6)
  
  projects                  projects  @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  locations_finalized_by_profile profiles? @relation("project_readiness_locations_finalized_by", fields: [locations_finalized_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roles_finalized_by_profile     profiles? @relation("project_readiness_roles_finalized_by", fields: [roles_finalized_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  team_finalized_by_profile      profiles? @relation("project_readiness_team_finalized_by", fields: [team_finalized_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  talent_finalized_by_profile    profiles? @relation("project_readiness_talent_finalized_by", fields: [talent_finalized_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([project_id], map: "idx_project_readiness_project_id")
  @@index([overall_status], map: "idx_project_readiness_overall_status")
  @@index([last_updated], map: "idx_project_readiness_last_updated")
  @@index([urgent_assignment_issues], map: "idx_project_readiness_urgent_issues")
  @@index([locations_status], map: "idx_project_readiness_locations_status")
  @@index([roles_status], map: "idx_project_readiness_roles_status")
  @@index([team_status], map: "idx_project_readiness_team_status")
  @@index([talent_status], map: "idx_project_readiness_talent_status")
  @@schema("public")
}

model projects {
  id                         String                       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                       String
  production_company         String?
  hiring_contact             String?
  location                   String?
  description                String?
  start_date                 DateTime                     @db.Date
  end_date                   DateTime                     @db.Date
  status                     project_status?              @default(prep)
  created_by                 String?                      @db.Uuid
  created_at                 DateTime?                    @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime?                    @default(now()) @db.Timestamptz(6)
  talent_expected            Int?
  phase_updated_at           DateTime?                    @default(now()) @db.Timestamptz(6)
  auto_transitions_enabled   Boolean?                     @default(true)
  timezone                   String?                      @db.VarChar(50)
  rehearsal_start_date       DateTime?                    @db.Date
  show_end_date              DateTime?                    @db.Date
  notifications              notifications[]
  project_locations          project_locations[]
  project_role_templates     project_role_templates[]
  project_roles              project_roles[]
  project_readiness          project_readiness?
  profiles                   profiles?                    @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shifts                     shifts[]
  talent_groups              talent_groups[]
  talent_project_assignments talent_project_assignments[]
  team_assignments           team_assignments[]
  timecards                  timecards[]
  user_favorites             user_favorites[]
  talent_daily_assignments   talent_daily_assignments[]
  group_daily_assignments    group_daily_assignments[]
  project_settings           project_settings?
  project_audit_log          project_audit_log[]

  @@index([phase_updated_at], map: "idx_projects_phase_updated_at")
  @@index([auto_transitions_enabled], map: "idx_projects_auto_transitions")
  @@index([timezone], map: "idx_projects_timezone")
  @@index([rehearsal_start_date], map: "idx_projects_rehearsal_start_date")
  @@index([show_end_date], map: "idx_projects_show_end_date")
  @@index([status, rehearsal_start_date, show_end_date], map: "idx_projects_status_dates")
  @@index([status, auto_transitions_enabled, rehearsal_start_date, show_end_date], map: "idx_projects_lifecycle_tracking")
  @@schema("public")
}

model project_settings {
  project_id                 String    @id @db.Uuid
  default_break_duration     Int?      @default(30)
  payroll_export_format      String?   @default("csv") @db.VarChar(10)
  notification_rules         Json?     @default("{\"timecardReminders\": true, \"shiftAlerts\": true, \"talentArrivalNotifications\": false, \"overtimeWarnings\": true}")
  auto_transitions_enabled   Boolean?  @default(true)
  archive_month              Int?      @default(4)
  archive_day                Int?      @default(1)
  post_show_transition_hour  Int?      @default(6)
  created_at                 DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime? @default(now()) @db.Timestamptz(6)
  updated_by                 String?   @db.Uuid
  projects                   projects  @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updated_by_profile         profiles? @relation(fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model project_audit_log {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id String    @db.Uuid
  user_id    String    @db.Uuid
  action     String    @db.VarChar(100)
  details    Json?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  projects   projects  @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profiles   profiles  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([project_id], map: "idx_project_audit_log_project_id")
  @@index([created_at(sort: Desc)], map: "idx_project_audit_log_created_at")
  @@index([action, created_at(sort: Desc)], map: "idx_project_audit_log_phase_transitions")
  @@index([project_id, action], map: "idx_project_audit_log_project_phase")
  @@schema("public")
}

model auth_logs {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_type String    @db.VarChar(50)
  email      String?   @db.VarChar(255)
  user_id    String?   @db.Uuid
  ip_address String?   @db.VarChar(45)
  details    String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  users      users?    @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([created_at(sort: Desc)], map: "idx_auth_logs_created")
  @@index([event_type, created_at(sort: Desc)], map: "idx_auth_logs_type")
  @@schema("public")
}

model public_schema_migrations {
  id             Int       @id @default(autoincrement())
  migration_name String    @unique @db.VarChar(255)
  applied_at     DateTime? @default(now()) @db.Timestamptz(6)
  rollback_sql   String?
  notes          String?

  @@map("schema_migrations")
  @@schema("public")
}

model shifts {
  id             String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id        String?       @db.Uuid
  project_id     String?       @db.Uuid
  shift_date     DateTime      @db.Date
  check_in_time  DateTime?     @db.Timestamptz(6)
  check_out_time DateTime?     @db.Timestamptz(6)
  status         shift_status? @default(checked_out)
  created_at     DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?     @default(now()) @db.Timestamptz(6)
  breaks         breaks[]
  projects       projects?     @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profiles       profiles?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, project_id, shift_date])
  @@schema("public")
}

model system_settings {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  key        String    @unique
  value      Json
  updated_by String?   @db.Uuid
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  profiles   profiles? @relation(fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model talent {
  id                         String                       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  notes                      String?
  created_at                 DateTime?                    @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime?                    @default(now()) @db.Timestamptz(6)
  rep_name                   String                       @default("") @db.VarChar(100)
  rep_email                  String                       @default("") @db.VarChar(255)
  rep_phone                  String                       @default("") @db.VarChar(20)
  first_name                 String                       @db.VarChar(50)
  last_name                  String                       @db.VarChar(50)
  contact_info               Json?
  talent_project_assignments talent_project_assignments[]
  talent_status              talent_status[]
  user_favorites             user_favorites[]
  talent_daily_assignments   talent_daily_assignments[]

  @@schema("public")
}

model project_locations {
  id           String    @id(map: "talent_locations_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  project_id   String?   @db.Uuid
  name         String
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  is_default   Boolean?  @default(false)
  sort_order   Int?      @default(0)
  abbreviation String?   @db.VarChar(3)
  color        String?   @default("#3b82f6") @db.VarChar(7)
  updated_at   DateTime? @updatedAt @db.Timestamptz(6)
  projects     projects? @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "talent_locations_project_id_fkey")

  @@unique([project_id, name], map: "talent_locations_project_id_name_key")
  @@index([project_id], map: "idx_project_locations_project_id")
  @@index([project_id, is_default], map: "idx_project_locations_project_default")
  @@index([project_id, sort_order], map: "idx_project_locations_sort_order")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model talent_project_assignments {
  id                                                        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  talent_id                                                 String    @db.Uuid
  project_id                                                String    @db.Uuid
  assigned_at                                               DateTime? @default(now()) @db.Timestamptz(6)
  assigned_by                                               String?   @db.Uuid
  status                                                    String?   @default("active") @db.VarChar(20)
  escort_id                                                 String?   @db.Uuid
  created_at                                                DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                                                DateTime? @default(now()) @db.Timestamptz(6)
  display_order                                             Int?      @default(0)
  scheduled_dates                                           String[]  @default([])
  profiles_talent_project_assignments_assigned_byToprofiles profiles? @relation("talent_project_assignments_assigned_byToprofiles", fields: [assigned_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profiles_talent_project_assignments_escort_idToprofiles   profiles? @relation("talent_project_assignments_escort_idToprofiles", fields: [escort_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  projects                                                  projects  @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  talent                                                    talent    @relation(fields: [talent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([talent_id, project_id, status])
  @@index([project_id, display_order], map: "idx_talent_project_assignments_display_order")
  @@schema("public")
}

model talent_status {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  talent_id   String?   @db.Uuid
  location_id String?   @db.Uuid
  updated_by  String?   @db.Uuid
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  talent      talent?   @relation(fields: [talent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profiles    profiles? @relation(fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model talent_groups {
  id                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id             String    @db.Uuid
  group_name             String    @db.VarChar(255)
  members                Json      @default("[]")
  scheduled_dates        String[]  @default([])
  assigned_escort_id     String?   @db.Uuid
  created_at             DateTime? @default(now()) @db.Timestamptz(6)
  updated_at             DateTime? @default(now()) @db.Timestamptz(6)
  display_order          Int?      @default(0)
  point_of_contact_name  String?   @db.VarChar(255)
  point_of_contact_phone String?   @db.VarChar(20)
  assigned_escort_ids    String[]  @default([]) @db.Uuid
  escort_dropdown_count  Int?      @default(1)
  assigned_escort        profiles? @relation(fields: [assigned_escort_id], references: [id], onUpdate: NoAction)
  projects               projects  @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  group_daily_assignments group_daily_assignments[]

  @@unique([project_id, group_name], map: "unique_group_name_per_project")
  @@index([project_id], map: "idx_talent_groups_project_id")
  @@index([assigned_escort_id], map: "idx_talent_groups_assigned_escort")
  @@index([project_id, display_order], map: "idx_talent_groups_display_order")
  @@index([assigned_escort_ids], map: "idx_talent_groups_assigned_escort_ids", type: Gin)
  @@schema("public")
}

model talent_daily_assignments {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  talent_id       String    @db.Uuid
  project_id      String    @db.Uuid
  assignment_date DateTime  @db.Date
  escort_id       String?   @db.Uuid
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)
  talent          talent    @relation(fields: [talent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  projects        projects  @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profiles        profiles? @relation(fields: [escort_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([talent_id, project_id, assignment_date, escort_id])
  @@index([project_id, assignment_date], map: "idx_talent_daily_assignments_project_date")
  @@index([escort_id, assignment_date], map: "idx_talent_daily_assignments_escort_date")
  @@index([talent_id, project_id], map: "idx_talent_daily_assignments_talent_project")
  @@schema("public")
}

model group_daily_assignments {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  group_id        String        @db.Uuid
  project_id      String        @db.Uuid
  assignment_date DateTime      @db.Date
  escort_id       String?       @db.Uuid
  created_at      DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?     @default(now()) @db.Timestamptz(6)
  talent_groups   talent_groups @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  projects        projects      @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profiles        profiles?     @relation(fields: [escort_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([group_id, project_id, assignment_date, escort_id])
  @@index([project_id, assignment_date], map: "idx_group_daily_assignments_project_date")
  @@index([escort_id, assignment_date], map: "idx_group_daily_assignments_escort_date")
  @@index([group_id, project_id], map: "idx_group_daily_assignments_group_project")
  @@schema("public")
}

model team_assignments {
  id              String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  project_id      String?      @db.Uuid
  user_id         String?      @db.Uuid
  pay_rate        Decimal?     @db.Decimal(10, 2)
  schedule_notes  String?
  created_at      DateTime?    @default(now()) @db.Timestamptz(6)
  role            project_role
  available_dates String[]     @default([])
  confirmed_at    DateTime?    @db.Timestamptz(6)
  projects        projects?    @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profiles        profiles?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([project_id, user_id])
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model timecards {
  id                                       String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                                  String?          @db.Uuid
  project_id                               String?          @db.Uuid
  status                                   timecard_status? @default(draft)
  submitted_at                             DateTime?        @db.Timestamptz(6)
  approved_at                              DateTime?        @db.Timestamptz(6)
  approved_by                              String?          @db.Uuid
  rejection_reason                         String?
  admin_notes                              String?
  created_at                               DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at                               DateTime?        @default(now()) @db.Timestamptz(6)
  date                                     DateTime?        @db.Date
  check_in_time                            DateTime?        @db.Time(6)
  check_out_time                           DateTime?        @db.Time(6)
  break_start_time                         DateTime?        @db.Time(6)
  break_end_time                           DateTime?        @db.Time(6)
  total_hours                              Decimal?         @default(0) @db.Decimal(5, 2)
  break_duration                           Decimal?         @default(0) @db.Decimal(4, 2)
  pay_rate                                 Decimal?         @default(0) @db.Decimal(8, 2)
  total_pay                                Decimal?         @default(0) @db.Decimal(10, 2)
  manually_edited                          Boolean?         @default(false)
  supervisor_comments                      String?
  profiles_timecards_approved_byToprofiles profiles?        @relation("timecards_approved_byToprofiles", fields: [approved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  projects                                 projects?        @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profiles_timecards_user_idToprofiles     profiles?        @relation("timecards_user_idToprofiles", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, project_id])
  @@unique([user_id, project_id, date], map: "timecards_user_project_date_unique")
  @@index([approved_by], map: "idx_timecards_approved_by")
  @@index([date], map: "idx_timecards_date")
  @@index([project_id], map: "idx_timecards_project_id")
  @@index([project_id, status], map: "idx_timecards_project_status")
  @@index([status], map: "idx_timecards_status")
  @@index([submitted_at], map: "idx_timecards_submitted_at")
  @@index([user_id, date], map: "idx_timecards_user_date")
  @@index([user_id], map: "idx_timecards_user_id")
  @@index([user_id, status], map: "idx_timecards_user_status")
  @@schema("public")
}

model user_favorites {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?   @db.Uuid
  talent_id  String?   @db.Uuid
  project_id String?   @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  projects   projects? @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  talent     talent?   @relation(fields: [talent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profiles   profiles? @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, talent_id, project_id])
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model oauth_clients {
  id                 String                  @id @db.Uuid
  client_id          String                  @unique
  client_secret_hash String
  registration_type  oauth_registration_type
  redirect_uris      String
  grant_types        String
  client_name        String?
  client_uri         String?
  logo_uri           String?
  created_at         DateTime                @default(now()) @db.Timestamptz(6)
  updated_at         DateTime                @default(now()) @db.Timestamptz(6)
  deleted_at         DateTime?               @db.Timestamptz(6)

  @@index([client_id])
  @@index([deleted_at])
  @@schema("auth")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn
  phone

  @@schema("auth")
}

enum one_time_token_type {
  confirmation_token
  reauthentication_token
  recovery_token
  email_change_token_new
  email_change_token_current
  phone_change_token

  @@schema("auth")
}

enum system_role {
  admin
  in_house
  supervisor
  coordinator
  talent_escort

  @@schema("public")
}

enum project_role {
  supervisor
  coordinator
  talent_escort

  @@schema("public")
}

enum project_status {
  prep
  staffing
  pre_show
  active
  post_show
  complete
  completed
  archived

  @@schema("public")
}

enum shift_status {
  checked_out
  checked_in
  on_break

  @@schema("public")
}

enum timecard_status {
  draft
  submitted
  approved
  rejected

  @@schema("public")
}

enum user_status {
  pending
  active
  inactive

  @@schema("public")
}

enum oauth_registration_type {
  dynamic
  manual

  @@schema("auth")
}
